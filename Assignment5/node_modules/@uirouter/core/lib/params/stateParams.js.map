{
  "version": 3,
  "file": "stateParams.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/core/params/stateParams.ts"
  ],
  "names": [],
  "mappings": ";;;AACA,2CAA0D;AAG1D;IAGE,qBAAY,MAAgB;QAAhB,uBAAA,EAAA,WAAgB;QAC1B,eAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACvB,CAAC;IAED;;;;;;;OAOG;IACH,8BAAQ,GAAR,UAAS,SAAc,EAAE,QAAqB,EAAE,GAAgB;QAC9D,IAAM,OAAO,GAAG,kBAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,EACtC,SAAS,GAAQ,EAAE,EACnB,WAAW,GAAa,EAAE,CAAC;QAE7B,KAAK,IAAM,CAAC,IAAI,OAAO,EAAE;YACvB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM;gBAAE,SAAS;YAChD,IAAM,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACvC,IAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACnD,IAAI,CAAC,gBAAgB,CAAC,MAAM;gBAAE,SAAS;YAEvC,KAAK,IAAM,CAAC,IAAI,gBAAgB,EAAE;gBAChC,IAAI,YAAY,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,IAAI,KAAK,IAAI,WAAW,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;oBACrG,SAAS;gBACX,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;aAC5D;SACF;QACD,OAAO,eAAM,CAAC,EAAE,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IAC1C,CAAC;IACH,kBAAC;AAAD,CAAC,AAnCD,IAmCC;AAnCY,kCAAW",
  "sourcesContent": [
    "import { Param } from '.';\nimport { extend, ancestors, Obj } from '../common/common';\nimport { StateObject } from '../state/stateObject';\n\nexport class StateParams {\n  [key: string]: any;\n\n  constructor(params: Obj = {}) {\n    extend(this, params);\n  }\n\n  /**\n   * Merges a set of parameters with all parameters inherited between the common parents of the\n   * current state and a given destination state.\n   *\n   * @param {Object} newParams The set of parameters which will be composited with inherited params.\n   * @param {Object} $current Internal definition of object representing the current state.\n   * @param {Object} $to Internal definition of object representing state to transition to.\n   */\n  $inherit(newParams: Obj, $current: StateObject, $to: StateObject) {\n    const parents = ancestors($current, $to),\n      inherited: Obj = {},\n      inheritList: string[] = [];\n\n    for (const i in parents) {\n      if (!parents[i] || !parents[i].params) continue;\n      const parentParams = parents[i].params;\n      const parentParamsKeys = Object.keys(parentParams);\n      if (!parentParamsKeys.length) continue;\n\n      for (const j in parentParamsKeys) {\n        if (parentParams[parentParamsKeys[j]].inherit == false || inheritList.indexOf(parentParamsKeys[j]) >= 0)\n          continue;\n        inheritList.push(parentParamsKeys[j]);\n        inherited[parentParamsKeys[j]] = this[parentParamsKeys[j]];\n      }\n    }\n    return extend({}, inherited, newParams);\n  }\n}\n"
  ]
}